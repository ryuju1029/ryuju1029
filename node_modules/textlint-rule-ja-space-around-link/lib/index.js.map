{"version":3,"sources":["../src/index.js"],"names":["isJapaneseChar","text","test","defaultOptions","before","after","reporter","context","options","Syntax","RuleError","report","fixer","getSource","allowBeforeSpace","allowAfterSpace","Link","node","nodeText","textWithPadding","beforeChar","beforeBeforeChar","existBeforeChar","afterChar","length","afterAfterChar","existAfterChar","index","fix","insertTextBeforeRange","replaceTextRange","insertTextAfterRange","module","exports","linter"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst isJapaneseChar = (text) => {\n  return /^(?:[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])$/.test(\n    text\n  );\n};\nconst defaultOptions = {\n  before: false,\n  after: false,\n};\nfunction reporter(context, options) {\n  const { Syntax, RuleError, report, fixer, getSource } = context;\n  const allowBeforeSpace = options.before || defaultOptions.before;\n  const allowAfterSpace = options.after || defaultOptions.after;\n  return {\n    [Syntax.Link](node) {\n      const nodeText = getSource(node);\n      // |  `code`  |\n      // InlineCodeの前後2文字文を取得\n      // スペース + 前後の文字を取るため\n      // 文字が日本語以外はチェック対象にしないようにするため\n      const textWithPadding = getSource(node, 2, 2);\n      if (!textWithPadding) {\n        return;\n      }\n      const beforeChar = textWithPadding[1];\n      const beforeBeforeChar = textWithPadding[0];\n      const existBeforeChar = nodeText[0] !== beforeChar;\n      const afterChar = textWithPadding[textWithPadding.length - 2];\n      const afterAfterChar = textWithPadding[textWithPadding.length - 1];\n      const existAfterChar = nodeText[textWithPadding.length - 1] !== afterChar;\n      // InlineCodeの前に文字が存在している時のみチェック\n      if (existBeforeChar) {\n        if (allowBeforeSpace) {\n          if (beforeChar !== \" \" && isJapaneseChar(beforeChar)) {\n            report(\n              node,\n              new RuleError(\"リンクの前にスペースを入れてください。\", {\n                index: -1, // before `\n                fix: fixer.insertTextBeforeRange([0, 0], \" \"),\n              })\n            );\n          }\n        } else {\n          if (beforeChar === \" \" && isJapaneseChar(beforeBeforeChar)) {\n            report(\n              node,\n              new RuleError(\"リンクの前にスペースを入れません。\", {\n                index: -1, // before `\n                fix: fixer.replaceTextRange([-1, 0], \"\"),\n              })\n            );\n          }\n        }\n      }\n      // InlineCodeの後に文字が存在している時のみチェック\n      if (existAfterChar) {\n        if (allowAfterSpace) {\n          if (afterChar !== \" \" && isJapaneseChar(afterChar)) {\n            report(\n              node,\n              new RuleError(\"リンクの後にスペースを入れてください。\", {\n                index: nodeText.length,\n                fix: fixer.insertTextAfterRange([0, nodeText.length], \" \"),\n              })\n            );\n          }\n        } else {\n          if (afterChar === \" \" && isJapaneseChar(afterAfterChar)) {\n            report(\n              node,\n              new RuleError(\"リンクの後にスペースを入れません。\", {\n                index: nodeText.length + 1,\n                fix: fixer.replaceTextRange(\n                  [nodeText.length, nodeText.length + 1],\n                  \"\"\n                ),\n              })\n            );\n          }\n        }\n      }\n    },\n  };\n}\nmodule.exports = {\n  linter: reporter,\n  fixer: reporter,\n};\n"],"file":"index.js"}