{"version":3,"sources":["../src/index.js"],"names":["assert","require","PunctuationRegExp","ZenRegExpStr","defaultSpaceOptions","alphabets","numbers","punctuation","defaultOptions","lintStyledNode","reporter","context","options","parseSpaceOption","opt","exceptPunctuation","Array","isArray","every","v","Object","keys","includes","userOptions","fromEntries","map","key","Syntax","RuleError","report","fixer","getSource","helper","RuleHelper","spaceOption","space","undefined","createFilter","text","padding","match","targetChar","index","test","noSpaceBetween","node","betweenHanAndZen","RegExp","betweenZenAndHan","reportMatch","fix","replaceTextRange","filter","forEach","needSpaceBetween","generateRegExp","btwHanAndZen","expStr","betweenHanAndZenRegExp","betweenZenAndHanRegExp","errorMsg","Str","isPlainStrNode","noSpace","module","exports","linter"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\n/*\n 全角文字と半角文字の間にスペースを入れるかどうか\n */\nimport {RuleHelper} from \"textlint-rule-helper\";\nimport {matchCaptureGroupAll} from \"match-index\";\nconst PunctuationRegExp = /[。、]/;\nconst ZenRegExpStr = '[、。]|[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ]';\nconst defaultSpaceOptions = {\n    alphabets: false,\n    numbers: false,\n    punctuation: false\n};\nconst defaultOptions = {\n    // プレーンテキスト以外を対象とするか See https://github.com/textlint/textlint-rule-helper#rulehelperisplainstrnodenode-boolean\n    lintStyledNode: false,\n};\nfunction reporter(context, options = {}) {\n   /**\n    * 入力された `space` オプションを内部処理用に成形する\n    * @param {string|Array|undefined} opt `space` オプションのインプット\n    * @param {boolean|undefined} exceptPunctuation `exceptPunctuation` オプションのインプット\n    * @returns {Object}\n    */\n    const parseSpaceOption = (opt, exceptPunctuation) => {\n      if (typeof opt === 'string') {\n        assert(opt === \"always\" || opt === \"never\", `\"space\" options should be \"always\", \"never\" or an array.`);\n\n        if (opt === \"always\") {\n          if (exceptPunctuation === false) {\n            return {...defaultSpaceOptions, alphabets: true, numbers: true, punctuation: true};\n          } else {\n            return {...defaultSpaceOptions, alphabets: true, numbers: true};\n          }\n        } else if (opt === \"never\") {\n          if (exceptPunctuation === false) {\n            return {...defaultSpaceOptions, punctuation: true};\n          } else {\n            return defaultSpaceOptions;\n          }\n        }\n      } else if (Array.isArray(opt)) {\n        assert(\n          opt.every((v) => Object.keys(defaultSpaceOptions).includes(v)),\n          `Only \"alphabets\", \"numbers\", \"punctuation\" can be included in the array.`\n        );\n        const userOptions = Object.fromEntries(opt.map(key => [key, true]));\n        return {...defaultSpaceOptions, ...userOptions};\n      }\n\n      return defaultSpaceOptions;\n    }\n\n    const {Syntax, RuleError, report, fixer, getSource} = context;\n    const helper = new RuleHelper();\n    const spaceOption = parseSpaceOption(options.space, options.exceptPunctuation);\n    const lintStyledNode = options.lintStyledNode !== undefined\n        ? options.lintStyledNode\n        : defaultOptions.lintStyledNode;\n    /**\n     * `text`を対象に例外オプションを取り除くfilter関数を返す\n     * @param {string} text テスト対象のテキスト全体\n     * @param {number} padding +1 or -1\n     * @returns {function(*, *)}\n     */\n    const createFilter = (text, padding) => {\n        /**\n         * `PunctuationRegExp`で指定された例外を取り除く\n         * @param {Object} match\n         * @returns {boolean}\n         */\n        return (match) => {\n            const targetChar = text[match.index + padding];\n            if (!targetChar) {\n                return false;\n            }\n            if (!spaceOption.punctuation && PunctuationRegExp.test(targetChar)) {\n                return false;\n            }\n            return true;\n        }\n    };\n    // Never: アルファベットと全角の間はスペースを入れない\n    const noSpaceBetween = (node, text) => {\n        const betweenHanAndZen = matchCaptureGroupAll(text, new RegExp(`[A-Za-z0-9]([ 　])(?:${ZenRegExpStr})`));\n        const betweenZenAndHan = matchCaptureGroupAll(text, new RegExp(`(?:${ZenRegExpStr})([ 　])[A-Za-z0-9]`));\n        const reportMatch = (match) => {\n            const {index} = match;\n            report(node, new RuleError(\"原則として、全角文字と半角文字の間にスペースを入れません。\", {\n                index: match.index,\n                fix: fixer.replaceTextRange([index, index + 1], \"\")\n            }));\n        };\n        betweenHanAndZen.filter(createFilter(text, 1)).forEach(reportMatch);\n        betweenZenAndHan.filter(createFilter(text, -1)).forEach(reportMatch);\n    };\n\n    // Always: アルファベットと全角の間はスペースを入れる\n    const needSpaceBetween = (node, text, options) => {\n       /**\n        * オプションを元に正規表現オプジェクトを生成する\n        * @param {Array} opt `space` オプション\n        * @param {boolean} btwHanAndZen=true 半角全角の間か全角半角の間か\n        * @returns {Object}\n        */\n        const generateRegExp = (opt, btwHanAndZen = true) => {\n          const alphabets = opt.alphabets ? 'A-Za-z' : '';\n          const numbers = opt.numbers ? '0-9' : '';\n\n          let expStr;\n          if (btwHanAndZen) {\n            expStr = `([${alphabets}${numbers}])(?:${ZenRegExpStr})`;\n          } else {\n            expStr = `(${ZenRegExpStr})[${alphabets}${numbers}]`;\n          }\n\n          return new RegExp(expStr);\n        };\n\n        const betweenHanAndZenRegExp = generateRegExp(options);\n        const betweenZenAndHanRegExp = generateRegExp(options, false);\n        const errorMsg = '原則として、全角文字と半角文字の間にスペースを入れます。';\n\n        const betweenHanAndZen = matchCaptureGroupAll(text, betweenHanAndZenRegExp);\n        const betweenZenAndHan = matchCaptureGroupAll(text, betweenZenAndHanRegExp);\n        const reportMatch = (match) => {\n            const {index} = match;\n            report(node, new RuleError(errorMsg, {\n                index: match.index,\n                fix: fixer.replaceTextRange([index + 1, index + 1], \" \")\n            }));\n        };\n        betweenHanAndZen.filter(createFilter(text, 1)).forEach(reportMatch);\n        betweenZenAndHan.filter(createFilter(text, 0)).forEach(reportMatch);\n    };\n    return {\n        [Syntax.Str](node){\n            if (!lintStyledNode && !helper.isPlainStrNode(node)) {\n                return;\n            }\n            const text = getSource(node);\n\n            const noSpace = (key) => key === 'punctuation' ? true : !spaceOption[key];\n            if (Object.keys(spaceOption).every(noSpace)) {\n                noSpaceBetween(node, text);\n            } else {\n                needSpaceBetween(node, text, spaceOption);\n            }\n        }\n    }\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"index.js"}