{"version":3,"file":"textlint-rule-ja-no-mixed-period.js","names":["RuleHelper","require","japaneseRegExp","classicPeriodMarkPattern","checkEndsWithPeriod","defaultOptions","periodMark","allowPeriodMarks","allowEmojiAtEnd","forceAppendPeriod","checkFootnote","reporter","context","options","Syntax","RuleError","report","fixer","getSource","helper","preferPeriodMark","concat","undefined","FootnoteNodes","ignoredNodeTypes","ListItem","Link","Code","Image","BlockQuote","Emphasis","Paragraph","node","isChildNode","lastNode","children","length","type","Str","lastStrText","test","valid","index","periodMarks","allowEmoji","fix","replaceTextRange","module","exports","linter"],"sources":["../src/textlint-rule-ja-no-mixed-period.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst RuleHelper = require(\"textlint-rule-helper\").RuleHelper;\nconst japaneseRegExp =\n    /(?:[々〇〻\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])/;\n/***\n * 典型的な句点のパターン\n * これは`periodMark`と交換しても違和感がないものを登録\n * @type {RegExp}\n */\nconst classicPeriodMarkPattern = /[。\\.]/;\nconst checkEndsWithPeriod = require(\"check-ends-with-period\");\nconst defaultOptions = {\n    // 優先する句点文字\n    periodMark: \"。\",\n    // 句点文字として許可する文字列の配列\n    // 例外として許可したい文字列を設定する\n    // `periodMark`に指定したものは自動的に許可リストに加わる\n    allowPeriodMarks: [],\n    // 末尾に絵文字を置くことを許可するか\n    allowEmojiAtEnd: false,\n    // 句点で終わって無い場合に`periodMark`を--fix時に追加するかどうか\n    // デフォルトでは自動的に追加しない\n    forceAppendPeriod: false,\n    // [Note] このオプションは標準外なので隠しオプション扱い\n    // [Warning] このオプションはsemverの範囲外なのでいつでも壊れる可能性がある\n    // 脚注はチェック対象から外すかどうか(実質Re:View向け)\n    // デフォルトでは脚注構文(Re:View)は無視する\n    checkFootnote: false\n};\nconst reporter = (context, options = {}) => {\n    const { Syntax, RuleError, report, fixer, getSource } = context;\n    const helper = new RuleHelper(context);\n    // 優先する句点記号\n    const preferPeriodMark = options.periodMark || defaultOptions.periodMark;\n    // 優先する句点記号は常に句点として許可される\n    const allowPeriodMarks = (options.allowPeriodMarks || defaultOptions.allowPeriodMarks).concat(preferPeriodMark);\n    const allowEmojiAtEnd =\n        options.allowEmojiAtEnd !== undefined ? options.allowEmojiAtEnd : defaultOptions.allowEmojiAtEnd;\n    const forceAppendPeriod =\n        options.forceAppendPeriod !== undefined ? options.forceAppendPeriod : defaultOptions.forceAppendPeriod;\n    // [Note] Un-document option\n    const checkFootnote = options.checkFootnote !== undefined ? options.checkFootnote : defaultOptions.checkFootnote;\n    // 脚注のNode Typeを定義(TxtASTの定義外)\n    const FootnoteNodes = [\n        // https://github.com/orangain/textlint-plugin-review\n        \"Footnote\",\n        // https://github.com/textlint/textlint/blob/master/packages/%40textlint/markdown-to-ast/src/mapping/markdown-syntax-map.js\n        // 実際にはmarkdown-to-astではこれはParagraphを含まないInlineNodeなのであまり意味はない\n        \"Definition\",\n        \"footnoteDefinition\" // micromark\n    ];\n    const ignoredNodeTypes = [\n        Syntax.ListItem,\n        Syntax.Link,\n        Syntax.Code,\n        Syntax.Image,\n        Syntax.BlockQuote,\n        Syntax.Emphasis\n    ].concat(checkFootnote ? [] : FootnoteNodes);\n    return {\n        [Syntax.Paragraph](node) {\n            if (helper.isChildNode(node, ignoredNodeTypes)) {\n                return;\n            }\n            const lastNode = node.children[node.children.length - 1];\n            if (lastNode === undefined || lastNode.type !== Syntax.Str) {\n                return;\n            }\n            const lastStrText = getSource(lastNode);\n            if (lastStrText.length === 0) {\n                return;\n            }\n            // 日本語が含まれていない文章は無視する\n            if (!japaneseRegExp.test(lastStrText)) {\n                return;\n            }\n            const { valid, periodMark, index } = checkEndsWithPeriod(lastStrText, {\n                periodMarks: allowPeriodMarks,\n                allowEmoji: allowEmojiAtEnd\n            });\n            // 問題が無い場合は何もしない\n            if (valid) {\n                return;\n            }\n            // 文末がスペースである場合はスペースを削除する\n            if (/\\s/.test(periodMark)) {\n                report(\n                    lastNode,\n                    new RuleError(`文末が\"${preferPeriodMark}\"で終わっていません。末尾に不要なスペースがあります。`, {\n                        index,\n                        fix: fixer.replaceTextRange([index, index + periodMark.length], \"\")\n                    })\n                );\n                return;\n            }\n            // 典型的なパターンは自動的に`preferPeriodMark`に置き換える\n            // 例) \".\" であるなら \"。\"に変換\n            if (classicPeriodMarkPattern.test(periodMark)) {\n                report(\n                    lastNode,\n                    new RuleError(`文末が\"${preferPeriodMark}\"で終わっていません。`, {\n                        index: index,\n                        fix: fixer.replaceTextRange([index, index + preferPeriodMark.length], preferPeriodMark)\n                    })\n                );\n            } else {\n                // 句点を忘れているパターン\n                if (forceAppendPeriod) {\n                    // `forceAppendPeriod`のオプションがtrueならば、自動で句点を追加する。\n                    report(\n                        lastNode,\n                        new RuleError(`文末が\"${preferPeriodMark}\"で終わっていません。`, {\n                            index: index,\n                            fix: fixer.replaceTextRange([index + 1, index + 1], preferPeriodMark)\n                        })\n                    );\n                } else {\n                    report(\n                        lastNode,\n                        new RuleError(`文末が\"${preferPeriodMark}\"で終わっていません。`, {\n                            index: index\n                        })\n                    );\n                }\n            }\n        }\n    };\n};\n\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"mappings":"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"}